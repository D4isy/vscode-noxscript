export default [{"detailed": "", "return": "object", "name": "Wall", "text": "object Wall (int x, int y)", "brief": "Get a pointer to a wall by its wall coordinates.", "signature": {"documentation": "Get a pointer to a wall by its wall coordinates.", "parameters": [{"documentation": "wall coordinate X", "order": 0, "label": "int x"}, {"documentation": "wall coordinate Y", "order": 1, "label": "int y"}], "label": "object Wall (int x, int y)"}}, {"detailed": "", "return": "void", "name": "WallOpen", "text": "void WallOpen (object wall)", "brief": "Open a wall.", "signature": {"documentation": "Open a wall.", "parameters": [{"documentation": "a wall object", "order": 0, "label": "object wall"}], "label": "void WallOpen (object wall)"}}, {"detailed": "", "return": "void", "name": "WallGroupOpen", "text": "void WallGroupOpen (object wallGroup)", "brief": "Open walls in a group.", "signature": {"documentation": "Open walls in a group.", "parameters": [{"documentation": "a wall group object", "order": 0, "label": "object wallGroup"}], "label": "void WallGroupOpen (object wallGroup)"}}, {"detailed": "", "return": "void", "name": "WallClose", "text": "void WallClose (object wall)", "brief": "Close a wall.", "signature": {"documentation": "Close a wall.", "parameters": [{"documentation": "a wall object", "order": 0, "label": "object wall"}], "label": "void WallClose (object wall)"}}, {"detailed": "", "return": "void", "name": "WallGroupClose", "text": "void WallGroupClose (object wallGroup)", "brief": "Close walls in a group.", "signature": {"documentation": "Close walls in a group.", "parameters": [{"documentation": "a wall group object", "order": 0, "label": "object wallGroup"}], "label": "void WallGroupClose (object wallGroup)"}}, {"detailed": "This will toggle wall between opened and closed.", "return": "void", "name": "WallToggle", "text": "void WallToggle (object wall)", "brief": "Toggle a wall.", "signature": {"documentation": "Toggle a wall.", "parameters": [{"documentation": "a wall object", "order": 0, "label": "object wall"}], "label": "void WallToggle (object wall)"}}, {"detailed": "This will toggle a wall group between opened and closed.", "return": "void", "name": "WallGroupToggle", "text": "void WallGroupToggle (object wallGroup)", "brief": "Toggle walls in a group.", "signature": {"documentation": "Toggle walls in a group.", "parameters": [{"documentation": "a wall group object", "order": 0, "label": "object wallGroup"}], "label": "void WallGroupToggle (object wallGroup)"}}, {"detailed": "This will break a wall. The wall must be breakable.", "return": "void", "name": "WallBreak", "text": "void WallBreak (object wall)", "brief": "Breaks a wall.", "signature": {"documentation": "Breaks a wall.", "parameters": [{"documentation": "a wall object", "order": 0, "label": "object wall"}], "label": "void WallBreak (object wall)"}}, {"detailed": "This will break walls in a group. The walls must be breakable.", "return": "void", "name": "WallGroupBreak", "text": "void WallGroupBreak (object wallGroup)", "brief": "Breaks walls in a group.", "signature": {"documentation": "Breaks walls in a group.", "parameters": [{"documentation": "a wall group object", "order": 0, "label": "object wallGroup"}], "label": "void WallGroupBreak (object wallGroup)"}}, {"detailed": "This will create a timer that calls the given script function after a delay given in seconds.", "return": "int", "name": "SecondTimer", "text": "int SecondTimer (int seconds, function callback)", "brief": "Create a timer with delay in seconds.", "signature": {"documentation": "Create a timer with delay in seconds.", "parameters": [{"documentation": "delay", "order": 0, "label": "int seconds"}, {"documentation": "a script function", "order": 1, "label": "function callback"}], "label": "int SecondTimer (int seconds, function callback)"}}, {"detailed": "This will create a timer that calls the given script function after a delay given in frames.", "return": "int", "name": "FrameTimer", "text": "int FrameTimer (int frames, function callback)", "brief": "Create a timer with delay in frames.", "signature": {"documentation": "Create a timer with delay in frames.", "parameters": [{"documentation": "delay", "order": 0, "label": "int frames"}, {"documentation": "a script function", "order": 1, "label": "function callback"}], "label": "int FrameTimer (int frames, function callback)"}}, {"detailed": "This moves an object to a waypoint. The object must be movable or attached to a \"Mover\". If the waypoint is linked, the object will continue to move once it reaches the first waypoint.", "return": "void", "name": "Move", "text": "void Move (int id, object waypoint)", "brief": "Move an object to a waypoint.", "signature": {"documentation": "Move an object to a waypoint.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "a waypoint object", "order": 1, "label": "object waypoint"}], "label": "void Move (int id, object waypoint)"}}, {"detailed": "This moves the objects in a group to a waypoint. The objects must be movable or attached to a \"Mover\". If the waypoint is linked, the objects will continue to move once they reach the first waypoint.", "return": "void", "name": "GroupMove", "text": "void GroupMove (object objectGroup, object waypoint)", "brief": "Move objects in a group to a waypoint.", "signature": {"documentation": "Move objects in a group to a waypoint.", "parameters": [{"documentation": "an object group object", "order": 0, "label": "object objectGroup"}, {"documentation": "a waypoint object", "order": 1, "label": "object waypoint"}], "label": "void GroupMove (object objectGroup, object waypoint)"}}, {"detailed": "", "return": "void", "name": "LookAtDirection", "text": "void LookAtDirection (int id, int direction)", "brief": "Cause object to look in a direction.", "signature": {"documentation": "Cause object to look in a direction.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "see", "order": 1, "label": "int direction"}], "label": "void LookAtDirection (int id, int direction)"}}, {"detailed": "", "return": "void", "name": "GroupLookAtDirection", "text": "void GroupLookAtDirection (object objectGroup, int direction)", "brief": "Cause objects in a group to look in a direction.", "signature": {"documentation": "Cause objects in a group to look in a direction.", "parameters": [{"documentation": "an object group object", "order": 0, "label": "object objectGroup"}, {"documentation": "see", "order": 1, "label": "int direction"}], "label": "void GroupLookAtDirection (object objectGroup, int direction)"}}, {"detailed": "", "return": "void", "name": "ObjectOn", "text": "void ObjectOn (int id)", "brief": "Enable an object.", "signature": {"documentation": "Enable an object.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "void ObjectOn (int id)"}}, {"detailed": "", "return": "void", "name": "ObjectGroupOn", "text": "void ObjectGroupOn (object objectGroup)", "brief": "Enable objects in a group.", "signature": {"documentation": "Enable objects in a group.", "parameters": [{"documentation": "an object group object", "order": 0, "label": "object objectGroup"}], "label": "void ObjectGroupOn (object objectGroup)"}}, {"detailed": "", "return": "void", "name": "WayPointOn", "text": "void WayPointOn (object waypoint)", "brief": "Enable a waypoint.", "signature": {"documentation": "Enable a waypoint.", "parameters": [{"documentation": "a waypoint object", "order": 0, "label": "object waypoint"}], "label": "void WayPointOn (object waypoint)"}}, {"detailed": "", "return": "void", "name": "WayPointGroupOn", "text": "void WayPointGroupOn (object waypointGroup)", "brief": "Enable waypoints in a group.", "signature": {"documentation": "Enable waypoints in a group.", "parameters": [{"documentation": "a waypoint group object", "order": 0, "label": "object waypointGroup"}], "label": "void WayPointGroupOn (object waypointGroup)"}}, {"detailed": "", "return": "void", "name": "ObjectOff", "text": "void ObjectOff (int id)", "brief": "Disable an object.", "signature": {"documentation": "Disable an object.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "void ObjectOff (int id)"}}, {"detailed": "", "return": "void", "name": "ObjectGroupOff", "text": "void ObjectGroupOff (object objectGroup)", "brief": "Disable objects in a group.", "signature": {"documentation": "Disable objects in a group.", "parameters": [{"documentation": "an object group object", "order": 0, "label": "object objectGroup"}], "label": "void ObjectGroupOff (object objectGroup)"}}, {"detailed": "", "return": "void", "name": "WayPointOff", "text": "void WayPointOff (object waypoint)", "brief": "Disable a waypoint.", "signature": {"documentation": "Disable a waypoint.", "parameters": [{"documentation": "a waypoint object", "order": 0, "label": "object waypoint"}], "label": "void WayPointOff (object waypoint)"}}, {"detailed": "", "return": "void", "name": "WayPointGroupOff", "text": "void WayPointGroupOff (object waypointGroup)", "brief": "Disable waypoints in a group.", "signature": {"documentation": "Disable waypoints in a group.", "parameters": [{"documentation": "a waypoint group object", "order": 0, "label": "object waypointGroup"}], "label": "void WayPointGroupOff (object waypointGroup)"}}, {"detailed": "", "return": "void", "name": "ObjectToggle", "text": "void ObjectToggle (int id)", "brief": "Toggle whether object is disabled.", "signature": {"documentation": "Toggle whether object is disabled.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "void ObjectToggle (int id)"}}, {"detailed": "", "return": "void", "name": "ObjectGroupToggle", "text": "void ObjectGroupToggle (object objectGroup)", "brief": "Toggle whether objects in group are disabled.", "signature": {"documentation": "Toggle whether objects in group are disabled.", "parameters": [{"documentation": "an object group object", "order": 0, "label": "object objectGroup"}], "label": "void ObjectGroupToggle (object objectGroup)"}}, {"detailed": "", "return": "void", "name": "WayPointToggle", "text": "void WayPointToggle (object waypoint)", "brief": "Toggle whether waypoint is disabled.", "signature": {"documentation": "Toggle whether waypoint is disabled.", "parameters": [{"documentation": "a waypoint object", "order": 0, "label": "object waypoint"}], "label": "void WayPointToggle (object waypoint)"}}, {"detailed": "", "return": "void", "name": "WayPointGroupToggle", "text": "void WayPointGroupToggle (object waypointGroup)", "brief": "Toggle whether objects in group are disabled.", "signature": {"documentation": "Toggle whether objects in group are disabled.", "parameters": [{"documentation": "a waypoint group object", "order": 0, "label": "object waypointGroup"}], "label": "void WayPointGroupToggle (object waypointGroup)"}}, {"detailed": "", "return": "void", "name": "Delete", "text": "void Delete (int id)", "brief": "Delete an object.", "signature": {"documentation": "Delete an object.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "void Delete (int id)"}}, {"detailed": "", "return": "void", "name": "GroupDelete", "text": "void GroupDelete (object objectGroup)", "brief": "Delete objects in a group.", "signature": {"documentation": "Delete objects in a group.", "parameters": [{"documentation": "an object group object", "order": 0, "label": "object objectGroup"}], "label": "void GroupDelete (object objectGroup)"}}, {"detailed": "This will cause a NPC or monster to wander.", "return": "void", "name": "Wander", "text": "void Wander (int id)", "brief": "Cause an object to wander.", "signature": {"documentation": "Cause an object to wander.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "void Wander (int id)"}}, {"detailed": "", "return": "void", "name": "GroupWander", "text": "void GroupWander (object objectGroup)", "brief": "Cause objects in a group to wander.", "signature": {"documentation": "Cause objects in a group to wander.", "parameters": [{"documentation": "an object group object", "order": 0, "label": "object objectGroup"}], "label": "void GroupWander (object objectGroup)"}}, {"detailed": "This will not do anything.", "return": "void", "name": "Unused1f", "text": "void Unused1f (int id)", "brief": "Unused.", "signature": {"documentation": "Unused.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "void Unused1f (int id)"}}, {"detailed": "This will not do anything.", "return": "void", "name": "Unused20", "text": "void Unused20 (int id)", "brief": "Unused.", "signature": {"documentation": "Unused.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "void Unused20 (int id)"}}, {"detailed": "", "return": "void", "name": "GoBackHome", "text": "void GoBackHome (int id)", "brief": "Cause object to move to its starting location.", "signature": {"documentation": "Cause object to move to its starting location.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "void GoBackHome (int id)"}}, {"detailed": "", "return": "void", "name": "AudioEvent", "text": "void AudioEvent (string audio, object waypoint)", "brief": "Play an audio event at a location.", "signature": {"documentation": "Play an audio event at a location.", "parameters": [{"documentation": "a audio event name", "order": 0, "label": "string audio"}, {"documentation": "a waypoint object", "order": 1, "label": "object waypoint"}], "label": "void AudioEvent (string audio, object waypoint)"}}, {"detailed": "This will display on a localized string on the screen of SELF. If the string is not in the string database, it will instead print an error message with \"MISSING:\".", "return": "void", "name": "Print", "text": "void Print (string message)", "brief": "Display a localized string.", "signature": {"documentation": "Display a localized string.", "parameters": [{"documentation": "a string", "order": 0, "label": "string message"}], "label": "void Print (string message)"}}, {"detailed": "This will display on a localized string on everyone's screen. If the string is not in the string database, it will instead print an error message with \"MISSING:\".", "return": "void", "name": "PrintToAll", "text": "void PrintToAll (string message)", "brief": "Display a localized string to everyone.", "signature": {"documentation": "Display a localized string to everyone.", "parameters": [{"documentation": "a string", "order": 0, "label": "string message"}], "label": "void PrintToAll (string message)"}}, {"detailed": "This will display a localized string in a speech bubble. If the string is not in the string database, it will instead print an error message with \"MISSING:\".", "return": "void", "name": "Chat", "text": "void Chat (int id, string message)", "brief": "Cause an object to say a localized string.", "signature": {"documentation": "Cause an object to say a localized string.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "a string", "order": 1, "label": "string message"}], "label": "void Chat (int id, string message)"}}, {"detailed": "", "return": "void", "name": "StopScript", "text": "void StopScript (any value)", "brief": "Exit current script function.", "signature": {"documentation": "Exit current script function.", "parameters": [{"documentation": "the function return value, if it is non-void", "order": 0, "label": "any value"}], "label": "void StopScript (any value)"}}, {"detailed": "This will unlock a door. It has no effect if the object is not a door.", "return": "void", "name": "UnlockDoor", "text": "void UnlockDoor (int id)", "brief": "Unlock a door.", "signature": {"documentation": "Unlock a door.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "void UnlockDoor (int id)"}}, {"detailed": "This will lock a door. It has no effect if the object is not a door.", "return": "void", "name": "LockDoor", "text": "void LockDoor (int id)", "brief": "Lock a door.", "signature": {"documentation": "Lock a door.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "void LockDoor (int id)"}}, {"detailed": "", "return": "int", "name": "IsObjectOn", "text": "int IsObjectOn (int id)", "brief": "Get whether object is enabled.", "signature": {"documentation": "Get whether object is enabled.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "int IsObjectOn (int id)"}}, {"detailed": "", "return": "int", "name": "IsWaypointOn", "text": "int IsWaypointOn (object waypoint)", "brief": "Get whether waypoint is enabled.", "signature": {"documentation": "Get whether waypoint is enabled.", "parameters": [{"documentation": "a waypoint object", "order": 0, "label": "object waypoint"}], "label": "int IsWaypointOn (object waypoint)"}}, {"detailed": "This will return whether an object is locked. It works with any kind of lock.", "return": "int", "name": "IsLocked", "text": "int IsLocked (int id)", "brief": "Get whether object is locked.", "signature": {"documentation": "Get whether object is locked.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "int IsLocked (int id)"}}, {"detailed": "", "return": "float", "name": "RandomFloat", "text": "float RandomFloat (float min, float max)", "brief": "Random number (float).", "signature": {"documentation": "Random number (float).", "parameters": [{"documentation": "minimum value", "order": 0, "label": "float min"}, {"documentation": "maximum value", "order": 1, "label": "float max"}], "label": "float RandomFloat (float min, float max)"}}, {"detailed": "", "return": "int", "name": "Random", "text": "int Random (int min, int max)", "brief": "Random number (int).", "signature": {"documentation": "Random number (int).", "parameters": [{"documentation": "minimum value", "order": 0, "label": "int min"}, {"documentation": "maximum value", "order": 1, "label": "int max"}], "label": "int Random (int min, int max)"}}, {"detailed": "This will create a timer that calls the given script function after a delay given in seconds. The given argument will be passed into the script function.", "return": "int", "name": "SecondTimerWithArg", "text": "int SecondTimerWithArg (int seconds, any argument, function callback)", "brief": "Create a timer with delay in seconds with an argument.", "signature": {"documentation": "Create a timer with delay in seconds with an argument.", "parameters": [{"documentation": "delay", "order": 0, "label": "int seconds"}, {"documentation": "function argument", "order": 1, "label": "any argument"}, {"documentation": "a script function", "order": 2, "label": "function callback"}], "label": "int SecondTimerWithArg (int seconds, any argument, function callback)"}}, {"detailed": "This will create a timer that calls the given script function after a delay given in frames. The given argument will be passed into the script function.", "return": "int", "name": "FrameTimerWithArg", "text": "int FrameTimerWithArg (int frames, any argument, function callback)", "brief": "Create a timer with delay in frames with an argument.", "signature": {"documentation": "Create a timer with delay in frames with an argument.", "parameters": [{"documentation": "delay", "order": 0, "label": "int frames"}, {"documentation": "function argument", "order": 1, "label": "any argument"}, {"documentation": "a script function", "order": 2, "label": "function callback"}], "label": "int FrameTimerWithArg (int frames, any argument, function callback)"}}, {"detailed": "This will convert an integer to a string, and add the string to the string table temporarily.", "return": "string", "name": "IntToString", "text": "string IntToString (int number)", "brief": "Convert an integer to a string.", "signature": {"documentation": "Convert an integer to a string.", "parameters": [{"documentation": "a integer number", "order": 0, "label": "int number"}], "label": "string IntToString (int number)"}}, {"detailed": "This will convert a float to a string, and add the string to the string table temporarily.", "return": "string", "name": "FloatToString", "text": "string FloatToString (float number)", "brief": "Convert a float to a string.", "signature": {"documentation": "Convert a float to a string.", "parameters": [{"documentation": "a float number", "order": 0, "label": "float number"}], "label": "string FloatToString (float number)"}}, {"detailed": "This will create an object given a type and a starting location.\nExample usage: int spider = CreateObject(\"SmallAlbinoSpider\", Waypoint(\"SpiderHole\"))", "return": "int", "name": "CreateObject", "text": "int CreateObject (string type, object waypoint)", "brief": "Create an object at a location.", "signature": {"documentation": "Create an object at a location.", "parameters": [{"documentation": "an object type string", "order": 0, "label": "string type"}, {"documentation": "a waypoint object", "order": 1, "label": "object waypoint"}], "label": "int CreateObject (string type, object waypoint)"}}, {"detailed": "This will damage the target with a given source object, amount, and damage type.", "return": "void", "name": "Damage", "text": "void Damage (int target, int source, int amount, int type)", "brief": "Damages an object.", "signature": {"documentation": "Damages an object.", "parameters": [{"documentation": "an object id that receives damage", "order": 0, "label": "int target"}, {"documentation": "an object id as source of damange", "order": 1, "label": "int source"}, {"documentation": "amount of damage", "order": 2, "label": "int amount"}, {"documentation": "type of damange", "order": 3, "label": "int type"}], "label": "void Damage (int target, int source, int amount, int type)"}}, {"detailed": "This will damage the target objects with a given source object, amount, and damage type.", "return": "void", "name": "GroupDamage", "text": "void GroupDamage (object targetGroup, int source, int amount, int type)", "brief": "Damages objects in a group.", "signature": {"documentation": "Damages objects in a group.", "parameters": [{"documentation": "an object group object that receives damage", "order": 0, "label": "object targetGroup"}, {"documentation": "an object id as source of damange", "order": 1, "label": "int source"}, {"documentation": "amount of damage", "order": 2, "label": "int amount"}, {"documentation": "type of damange", "order": 3, "label": "int type"}], "label": "void GroupDamage (object targetGroup, int source, int amount, int type)"}}, {"detailed": "", "return": "int", "name": "CreateMover", "text": "int CreateMover (int id, int arg2, float arg3)", "brief": "Creates a Mover for an object.", "signature": {"documentation": "Creates a Mover for an object.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "integer", "order": 1, "label": "int arg2"}, {"documentation": "float", "order": 2, "label": "float arg3"}], "label": "int CreateMover (int id, int arg2, float arg3)"}}, {"detailed": "", "return": "void", "name": "GroupCreateMover", "text": "void GroupCreateMover (object objectGroup, int arg2, float arg3)", "brief": "Creates a Mover for every object in a group.", "signature": {"documentation": "Creates a Mover for every object in a group.", "parameters": [{"documentation": "an object group object", "order": 0, "label": "object objectGroup"}, {"documentation": "integer", "order": 1, "label": "int arg2"}, {"documentation": "float", "order": 2, "label": "float arg3"}], "label": "void GroupCreateMover (object objectGroup, int arg2, float arg3)"}}, {"detailed": "This will raise the spell level of the object. If the object can not cast this spell then it will have no effect.", "return": "int", "name": "AwardSpell", "text": "int AwardSpell (int id, string spell)", "brief": "Award spell level to object.", "signature": {"documentation": "Award spell level to object.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "a spell name", "order": 1, "label": "string spell"}], "label": "int AwardSpell (int id, string spell)"}}, {"detailed": "This will raise the spell level of the objects in the group. If an object can not cast this spell then it will have no effect on that object.", "return": "void", "name": "GroupAwardSpell", "text": "void GroupAwardSpell (object objectGroup, string spell)", "brief": "Award spell level to objects in a group.", "signature": {"documentation": "Award spell level to objects in a group.", "parameters": [{"documentation": "an object group object", "order": 0, "label": "object objectGroup"}, {"documentation": "a spell name", "order": 1, "label": "string spell"}], "label": "void GroupAwardSpell (object objectGroup, string spell)"}}, {"detailed": "This will grant an object an enchantment of a specified duration. If the enchantment name is incorrect, the game may crash.", "return": "void", "name": "Enchant", "text": "void Enchant (int id, string enchant, float duration)", "brief": "Grant object an enchantment.", "signature": {"documentation": "Grant object an enchantment.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "an enchantment name", "order": 1, "label": "string enchant"}, {"documentation": "in seconds", "order": 2, "label": "float duration"}], "label": "void Enchant (int id, string enchant, float duration)"}}, {"detailed": "This will grant the objects in a group an enchantment of a specified duration. If the enchantment name is incorrect, the game may crash.", "return": "void", "name": "GroupEnchant", "text": "void GroupEnchant (int id, string enchant, float duration)", "brief": "Grant objects in a group an enchantment.", "signature": {"documentation": "Grant objects in a group an enchantment.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "an enchantment name", "order": 1, "label": "string enchant"}, {"documentation": "in seconds", "order": 2, "label": "float duration"}], "label": "void GroupEnchant (int id, string enchant, float duration)"}}, {"detailed": "This will return the host's player object id. The host is the player with a player id of 31.", "return": "int", "name": "GetHost", "text": "int GetHost ()", "brief": "Get host's player object.", "signature": {"documentation": "Get host's player object.", "parameters": [], "label": "int GetHost ()"}}, {"detailed": "This will lookup an object by its script name and return the object id.", "return": "int", "name": "Object", "text": "int Object (string name)", "brief": "Lookup an object by name.", "signature": {"documentation": "Lookup an object by name.", "parameters": [{"documentation": "object name", "order": 0, "label": "string name"}], "label": "int Object (string name)"}}, {"detailed": "", "return": "float", "name": "GetObjectX", "text": "float GetObjectX (int id)", "brief": "Get object X coordinate.", "signature": {"documentation": "Get object X coordinate.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "float GetObjectX (int id)"}}, {"detailed": "", "return": "float", "name": "GetWaypointX", "text": "float GetWaypointX (object waypoint)", "brief": "Get waypoint X coordinate.", "signature": {"documentation": "Get waypoint X coordinate.", "parameters": [{"documentation": "a waypoint object", "order": 0, "label": "object waypoint"}], "label": "float GetWaypointX (object waypoint)"}}, {"detailed": "", "return": "float", "name": "GetObjectY", "text": "float GetObjectY (int id)", "brief": "Get object Y coordinate.", "signature": {"documentation": "Get object Y coordinate.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "float GetObjectY (int id)"}}, {"detailed": "", "return": "float", "name": "GetWaypointY", "text": "float GetWaypointY (object waypoint)", "brief": "Get waypoint Y coordinate.", "signature": {"documentation": "Get waypoint Y coordinate.", "parameters": [{"documentation": "a waypoint object", "order": 0, "label": "object waypoint"}], "label": "float GetWaypointY (object waypoint)"}}, {"detailed": "", "return": "float", "name": "GetObjectZ", "text": "float GetObjectZ (int id)", "brief": "Get object Z coordinate.", "signature": {"documentation": "Get object Z coordinate.", "parameters": [{"documentation": "a object id", "order": 0, "label": "int id"}], "label": "float GetObjectZ (int id)"}}, {"detailed": "See the description of", "return": "int", "name": "GetDirection", "text": "int GetDirection (int id)", "brief": "Get object direction.", "signature": {"documentation": "Get object direction.", "parameters": [{"documentation": "a object id", "order": 0, "label": "int id"}], "label": "int GetDirection (int id)"}}, {"detailed": "", "return": "void", "name": "MoveObject", "text": "void MoveObject (int id, float x, float y)", "brief": "Set an object's location.", "signature": {"documentation": "Set an object's location.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "x coordinate", "order": 1, "label": "float x"}, {"documentation": "y coordinate", "order": 2, "label": "float y"}], "label": "void MoveObject (int id, float x, float y)"}}, {"detailed": "", "return": "void", "name": "MoveWaypoint", "text": "void MoveWaypoint (object waypoint, float x, float y)", "brief": "Set a waypoint's location.", "signature": {"documentation": "Set a waypoint's location.", "parameters": [{"documentation": "a waypoint object", "order": 0, "label": "object waypoint"}, {"documentation": "x coordinate", "order": 1, "label": "float x"}, {"documentation": "y coordinate", "order": 2, "label": "float y"}], "label": "void MoveWaypoint (object waypoint, float x, float y)"}}, {"detailed": "This will set an object's Z coordinate and then let the object fall down.", "return": "void", "name": "Raise", "text": "void Raise (int id, float z)", "brief": "Set an object's Z coordinate.", "signature": {"documentation": "Set an object's Z coordinate.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "z coordinate", "order": 1, "label": "float z"}], "label": "void Raise (int id, float z)"}}, {"detailed": "This will set an object's direction. The direction is an angle represented as an integer between 0 and 255. Due east is 0, and the angle increases as the object turns clock-wise.", "return": "void", "name": "LookWithAngle", "text": "void LookWithAngle (int id, int angle)", "brief": "Set an object's direction.", "signature": {"documentation": "Set an object's direction.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "a number between 0 and 255", "order": 1, "label": "int angle"}], "label": "void LookWithAngle (int id, int angle)"}}, {"detailed": "", "return": "void", "name": "PushObjectTo", "text": "void PushObjectTo (int id, float x, float y)", "brief": "Push an object to a location.", "signature": {"documentation": "Push an object to a location.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "x coordinate", "order": 1, "label": "float x"}, {"documentation": "y coordinate", "order": 2, "label": "float y"}], "label": "void PushObjectTo (int id, float x, float y)"}}, {"detailed": "This will calculate a unit vector from the object's location to the specified location, and multiply it by the specified magnitude. This vector will be added to the object's location.", "return": "void", "name": "PushObject", "text": "void PushObject (int id, float magnitude, float x, float y)", "brief": "Push an object from a vector and magnitude.", "signature": {"documentation": "Push an object from a vector and magnitude.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "force magnitude", "order": 1, "label": "float magnitude"}, {"documentation": "force x coordinate", "order": 2, "label": "float x"}, {"documentation": "force y coordinate", "order": 3, "label": "float y"}], "label": "void PushObject (int id, float magnitude, float x, float y)"}}, {"detailed": "This will return the object id of the last item in the object's inventory. If the inventory is empty, it will return 0.\nThis is used with", "return": "int", "name": "GetLastItem", "text": "int GetLastItem (int id)", "brief": "Get object's last inventory item.", "signature": {"documentation": "Get object's last inventory item.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "int GetLastItem (int id)"}}, {"detailed": "This will return the object id of the previous item in the inventory from the given object id. If the specified object id is not in an inventory, or there are no more items in the inventory, it will return 0;\nThis is used with", "return": "int", "name": "GetPreviousItem", "text": "int GetPreviousItem (int id)", "brief": "Get previous inventory item.", "signature": {"documentation": "Get previous inventory item.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "int GetPreviousItem (int id)"}}, {"detailed": "", "return": "int", "name": "HasItem", "text": "int HasItem (int holder, int item)", "brief": "Get whether the item is in the object's inventory.", "signature": {"documentation": "Get whether the item is in the object's inventory.", "parameters": [{"documentation": "an object id with inventory to check", "order": 0, "label": "int holder"}, {"documentation": "an object id of item to check for", "order": 1, "label": "int item"}], "label": "int HasItem (int holder, int item)"}}, {"detailed": "This will return the object id that contains the item in its inventory.", "return": "int", "name": "GetHolder", "text": "int GetHolder (int item)", "brief": "Get the holder of an item.", "signature": {"documentation": "Get the holder of an item.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int item"}], "label": "int GetHolder (int item)"}}, {"detailed": "", "return": "int", "name": "Pickup", "text": "int Pickup (int id, int item)", "brief": "Cause object to pickup an item.", "signature": {"documentation": "Cause object to pickup an item.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "an object id to pickup", "order": 1, "label": "int item"}], "label": "int Pickup (int id, int item)"}}, {"detailed": "", "return": "int", "name": "Drop", "text": "int Drop (int id, int item)", "brief": "Cause object to drop an item.", "signature": {"documentation": "Cause object to drop an item.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "an object id to drop", "order": 1, "label": "int item"}], "label": "int Drop (int id, int item)"}}, {"detailed": "", "return": "int", "name": "HasClass", "text": "int HasClass (int id, string className)", "brief": "Get whether object has a class.", "signature": {"documentation": "Get whether object has a class.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "a class name", "order": 1, "label": "string className"}], "label": "int HasClass (int id, string className)"}}, {"detailed": "Does nothing.", "return": "void", "name": "Unused50", "text": "void Unused50 ()", "brief": "Unused.", "signature": {"documentation": "Unused.", "parameters": [], "label": "void Unused50 ()"}}, {"detailed": "", "return": "int", "name": "HasEnchant", "text": "int HasEnchant (int id, string enchant)", "brief": "Get whether object has an enchant.", "signature": {"documentation": "Get whether object has an enchant.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "an enchant name", "order": 1, "label": "string enchant"}], "label": "int HasEnchant (int id, string enchant)"}}, {"detailed": "", "return": "void", "name": "EnchantOff", "text": "void EnchantOff (int id, string enchant)", "brief": "Remove enchant from an object.", "signature": {"documentation": "Remove enchant from an object.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "an enchant name", "order": 1, "label": "string enchant"}], "label": "void EnchantOff (int id, string enchant)"}}, {"detailed": "", "return": "int", "name": "CurrentHealth", "text": "int CurrentHealth (int id)", "brief": "Get object's health.", "signature": {"documentation": "Get object's health.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "int CurrentHealth (int id)"}}, {"detailed": "", "return": "int", "name": "MaxHealth", "text": "int MaxHealth (int id)", "brief": "Get object's maximum health.", "signature": {"documentation": "Get object's maximum health.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "int MaxHealth (int id)"}}, {"detailed": "", "return": "void", "name": "RestoreHealth", "text": "void RestoreHealth (int id, int amount)", "brief": "Restore object's health.", "signature": {"documentation": "Restore object's health.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "amount of health to restore", "order": 1, "label": "int amount"}], "label": "void RestoreHealth (int id, int amount)"}}, {"detailed": "", "return": "float", "name": "Distance", "text": "float Distance (float x1, float y1, float x2, float y2)", "brief": "Calculate distance between two locations.", "signature": {"documentation": "Calculate distance between two locations.", "parameters": [{"documentation": "", "order": 0, "label": "float x1"}, {"documentation": "", "order": 1, "label": "float y1"}, {"documentation": "", "order": 2, "label": "float x2"}, {"documentation": "", "order": 3, "label": "float y2"}], "label": "float Distance (float x1, float y1, float x2, float y2)"}}, {"detailed": "This will first check if the location of the objects are within 512 of each other coordinate-wise. It not, it returns FALSE.\nIt then checks whether the first object can see the second object.", "return": "int", "name": "IsVisibleTo", "text": "int IsVisibleTo (int object1, int object2)", "brief": "Gets whether an object can see another object.", "signature": {"documentation": "Gets whether an object can see another object.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int object1"}, {"documentation": "an object id", "order": 1, "label": "int object2"}], "label": "int IsVisibleTo (int object1, int object2)"}}, {"detailed": "Does nothing.", "return": "void", "name": "Unused58", "text": "void Unused58 (int arg1, int arg2)", "brief": "Unused.", "signature": {"documentation": "Unused.", "parameters": [{"order": 0, "label": "int arg1"}, {"order": 1, "label": "int arg2"}], "label": "void Unused58 (int arg1, int arg2)"}}, {"detailed": "Does nothing.", "return": "void", "name": "Unused59", "text": "void Unused59 (int arg1, int arg2)", "brief": "Unused.", "signature": {"documentation": "Unused.", "parameters": [{"order": 0, "label": "int arg1"}, {"order": 1, "label": "int arg2"}], "label": "void Unused59 (int arg1, int arg2)"}}, {"detailed": "Does nothing.", "return": "void", "name": "Unused5a", "text": "void Unused5a (int arg1, int arg2)", "brief": "Unused.", "signature": {"documentation": "Unused.", "parameters": [{"order": 0, "label": "int arg1"}, {"order": 1, "label": "int arg2"}], "label": "void Unused5a (int arg1, int arg2)"}}, {"detailed": "Does nothing.", "return": "void", "name": "Unused5b", "text": "void Unused5b (int arg1, int arg2)", "brief": "Unused.", "signature": {"documentation": "Unused.", "parameters": [{"order": 0, "label": "int arg1"}, {"order": 1, "label": "int arg2"}], "label": "void Unused5b (int arg1, int arg2)"}}, {"detailed": "Does nothing.", "return": "void", "name": "Unused5c", "text": "void Unused5c (int arg1, int arg2)", "brief": "Unused.", "signature": {"documentation": "Unused.", "parameters": [{"order": 0, "label": "int arg1"}, {"order": 1, "label": "int arg2"}], "label": "void Unused5c (int arg1, int arg2)"}}, {"detailed": "Does nothing.", "return": "void", "name": "Unused5d", "text": "void Unused5d (int arg1, int arg2)", "brief": "Unused.", "signature": {"documentation": "Unused.", "parameters": [{"order": 0, "label": "int arg1"}, {"order": 1, "label": "int arg2"}], "label": "void Unused5d (int arg1, int arg2)"}}, {"detailed": "Localizes a string. Output is useless however.", "return": "int", "name": "Unused5e", "text": "int Unused5e (string str)", "brief": "Unused.", "signature": {"documentation": "Unused.", "parameters": [{"documentation": "a string", "order": 0, "label": "string str"}], "label": "int Unused5e (string str)"}}, {"detailed": "FIXME\nGet information about the loaded character.", "return": "int", "name": "GetCharacterData", "text": "int GetCharacterData (int idx)", "brief": "Get character data.", "signature": {"documentation": "Get character data.", "parameters": [{"documentation": "what to return (0-5)", "order": 0, "label": "int idx"}], "label": "int GetCharacterData (int idx)"}}, {"detailed": "", "return": "void", "name": "LookAtObject", "text": "void LookAtObject (int id, int target)", "brief": "Set direction of object so it is looking at another object.", "signature": {"documentation": "Set direction of object so it is looking at another object.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "an object id to look at", "order": 1, "label": "int target"}], "label": "void LookAtObject (int id, int target)"}}, {"detailed": "", "return": "void", "name": "Walk", "text": "void Walk (int id, float x, float y)", "brief": "Causes an object to walk to a location.", "signature": {"documentation": "Causes an object to walk to a location.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "x coordinate", "order": 1, "label": "float x"}, {"documentation": "y coordinate", "order": 2, "label": "float y"}], "label": "void Walk (int id, float x, float y)"}}, {"detailed": "", "return": "void", "name": "GroupWalk", "text": "void GroupWalk (object objectGroup, float x, float y)", "brief": "Causes objects in a group to walk to a location.", "signature": {"documentation": "Causes objects in a group to walk to a location.", "parameters": [{"documentation": "an object group object", "order": 0, "label": "object objectGroup"}, {"documentation": "x coordinate", "order": 1, "label": "float x"}, {"documentation": "y coordinate", "order": 2, "label": "float y"}], "label": "void GroupWalk (object objectGroup, float x, float y)"}}, {"detailed": "", "return": "int", "name": "CancelTimer", "text": "int CancelTimer (int id)", "brief": "Cancel a timer.", "signature": {"documentation": "Cancel a timer.", "parameters": [{"documentation": "a timer id", "order": 0, "label": "int id"}], "label": "int CancelTimer (int id)"}}, {"detailed": "This will trigger an effect from point (x1,y1) to (x2,y2). Some effects only have one point, in which case (x2,y2) is ignored.", "return": "void", "name": "Effect", "text": "void Effect (string effect, float x1, float y1, float x2, float y2)", "brief": "Trigger an effect.", "signature": {"documentation": "Trigger an effect.", "parameters": [{"documentation": "an effect name", "order": 0, "label": "string effect"}, {"documentation": "", "order": 1, "label": "float x1"}, {"documentation": "", "order": 2, "label": "float y1"}, {"documentation": "", "order": 3, "label": "float x2"}, {"documentation": "", "order": 4, "label": "float y2"}], "label": "void Effect (string effect, float x1, float y1, float x2, float y2)"}}, {"detailed": "This will make an object the owner of the target. This will make the target friendly to the owner, and it will accredit the target's kills to the owner.\nFor example, in a multiplayer map, you might have a switch that activates a hazard. You can use this so that if the hazard kills anyone, the player who activated the hazard gets the credit.", "return": "void", "name": "SetOwner", "text": "void SetOwner (int owner, int target)", "brief": "Set the owner of an object.", "signature": {"documentation": "Set the owner of an object.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int owner"}, {"documentation": "an object id", "order": 1, "label": "int target"}], "label": "void SetOwner (int owner, int target)"}}, {"detailed": "This is the same as", "return": "void", "name": "GroupSetOwner", "text": "void GroupSetOwner (int owner, object targets)", "brief": "Set the owner of objects in a group.", "signature": {"documentation": "Set the owner of objects in a group.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int owner"}, {"documentation": "an object group object", "order": 1, "label": "object targets"}], "label": "void GroupSetOwner (int owner, object targets)"}}, {"detailed": "This is the same as", "return": "void", "name": "SetOwners", "text": "void SetOwners (object owners, int target)", "brief": "Set the objects in a group as owners of target.", "signature": {"documentation": "Set the objects in a group as owners of target.", "parameters": [{"documentation": "an object group object", "order": 0, "label": "object owners"}, {"documentation": "an object id", "order": 1, "label": "int target"}], "label": "void SetOwners (object owners, int target)"}}, {"detailed": "This is the same as", "return": "void", "name": "GroupSetOwners", "text": "void GroupSetOwners (object owners, object targets)", "brief": "Set the objects in a group as owners of target.", "signature": {"documentation": "Set the objects in a group as owners of target.", "parameters": [{"documentation": "an object group object", "order": 0, "label": "object owners"}, {"documentation": "an object group object", "order": 1, "label": "object targets"}], "label": "void GroupSetOwners (object owners, object targets)"}}, {"detailed": "", "return": "int", "name": "IsOwnedBy", "text": "int IsOwnedBy (int id, int target)", "brief": "Get whether target is owned by object.", "signature": {"documentation": "Get whether target is owned by object.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "an object id", "order": 1, "label": "int target"}], "label": "int IsOwnedBy (int id, int target)"}}, {"detailed": "", "return": "int", "name": "GroupIsOwnedBy", "text": "int GroupIsOwnedBy (int id, object target)", "brief": "Get whether any object in target group is owned by object.", "signature": {"documentation": "Get whether any object in target group is owned by object.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "an object group object", "order": 1, "label": "object target"}], "label": "int GroupIsOwnedBy (int id, object target)"}}, {"detailed": "", "return": "int", "name": "IsOwnedByAny", "text": "int IsOwnedByAny (object objectGroup, int target)", "brief": "Get whether target is owned by any object in the group.", "signature": {"documentation": "Get whether target is owned by any object in the group.", "parameters": [{"documentation": "an object group object", "order": 0, "label": "object objectGroup"}, {"documentation": "an object id", "order": 1, "label": "int target"}], "label": "int IsOwnedByAny (object objectGroup, int target)"}}, {"detailed": "", "return": "int", "name": "GroupIsOwnedByAny", "text": "int GroupIsOwnedByAny (object objectGroup, object target)", "brief": "Get whether any object in target is owned by any object in the group.", "signature": {"documentation": "Get whether any object in target is owned by any object in the group.", "parameters": [{"documentation": "an object group object", "order": 0, "label": "object objectGroup"}, {"documentation": "an object group object", "order": 1, "label": "object target"}], "label": "int GroupIsOwnedByAny (object objectGroup, object target)"}}, {"detailed": "", "return": "void", "name": "ClearOwner", "text": "void ClearOwner (int id)", "brief": "Clear the owner of an object.", "signature": {"documentation": "Clear the owner of an object.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "void ClearOwner (int id)"}}, {"detailed": "", "return": "object", "name": "Waypoint", "text": "object Waypoint (string name)", "brief": "Lookup waypoint by name.", "signature": {"documentation": "Lookup waypoint by name.", "parameters": [{"documentation": "a waypoint name", "order": 0, "label": "string name"}], "label": "object Waypoint (string name)"}}, {"detailed": "", "return": "object", "name": "WaypointGroup", "text": "object WaypointGroup (string name)", "brief": "Lookup waypoint group by name.", "signature": {"documentation": "Lookup waypoint group by name.", "parameters": [{"documentation": "a waypoint group name", "order": 0, "label": "string name"}], "label": "object WaypointGroup (string name)"}}, {"detailed": "", "return": "object", "name": "ObjectGroup", "text": "object ObjectGroup (string name)", "brief": "Lookup object group by name.", "signature": {"documentation": "Lookup object group by name.", "parameters": [{"documentation": "a object group name", "order": 0, "label": "string name"}], "label": "object ObjectGroup (string name)"}}, {"detailed": "", "return": "object", "name": "WallGroup", "text": "object WallGroup (string name)", "brief": "Lookup wall group by name.", "signature": {"documentation": "Lookup wall group by name.", "parameters": [{"documentation": "a wall group name", "order": 0, "label": "string name"}], "label": "object WallGroup (string name)"}}, {"detailed": "This will display a localized string in a speech bubble. If the string is not in the string database, it will instead print an error message with \"MISSING:\".", "return": "void", "name": "ChatTimerSeconds", "text": "void ChatTimerSeconds (int id, string message, int duration)", "brief": "Cause an object to say a localized string for duration in seconds.", "signature": {"documentation": "Cause an object to say a localized string for duration in seconds.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "a string", "order": 1, "label": "string message"}, {"documentation": "in seconds", "order": 2, "label": "int duration"}], "label": "void ChatTimerSeconds (int id, string message, int duration)"}}, {"detailed": "This will display a localized string in a speech bubble. If the string is not in the string database, it will instead print an error message with \"MISSING:\".", "return": "void", "name": "ChatTimer", "text": "void ChatTimer (int id, string message, int duration)", "brief": "Cause an object to say a localized string for duration in frames.", "signature": {"documentation": "Cause an object to say a localized string for duration in frames.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "a string", "order": 1, "label": "string message"}, {"documentation": "in frames", "order": 2, "label": "int duration"}], "label": "void ChatTimer (int id, string message, int duration)"}}, {"detailed": "Does nothing.", "return": "void", "name": "Unused74", "text": "void Unused74 (int arg1, int arg2)", "brief": "Unused.", "signature": {"documentation": "Unused.", "parameters": [{"order": 0, "label": "int arg1"}, {"order": 1, "label": "int arg2"}], "label": "void Unused74 (int arg1, int arg2)"}}, {"detailed": "", "return": "void", "name": "DestroyChat", "text": "void DestroyChat (int id)", "brief": "Destroys object's speech bubble.", "signature": {"documentation": "Destroys object's speech bubble.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "void DestroyChat (int id)"}}, {"detailed": "", "return": "void", "name": "DestroyEveryChat", "text": "void DestroyEveryChat ()", "brief": "Destroys all speech bubbles.", "signature": {"documentation": "Destroys all speech bubbles.", "parameters": [], "label": "void DestroyEveryChat ()"}}, {"detailed": "", "return": "void", "name": "SetQuestStatus", "text": "void SetQuestStatus (int status, string name)", "brief": "Set quest status (int).", "signature": {"documentation": "Set quest status (int).", "parameters": [{"documentation": "value to save", "order": 0, "label": "int status"}, {"documentation": "quest name", "order": 1, "label": "string name"}], "label": "void SetQuestStatus (int status, string name)"}}, {"detailed": "", "return": "void", "name": "SetQuestStatusFloat", "text": "void SetQuestStatusFloat (float status, string name)", "brief": "Set quest status (float).", "signature": {"documentation": "Set quest status (float).", "parameters": [{"documentation": "value to save", "order": 0, "label": "float status"}, {"documentation": "quest name", "order": 1, "label": "string name"}], "label": "void SetQuestStatusFloat (float status, string name)"}}, {"detailed": "", "return": "void", "name": "GetQuestStatus", "text": "void GetQuestStatus (string name)", "brief": "Get quest status (int).", "signature": {"documentation": "Get quest status (int).", "parameters": [{"documentation": "quest name", "order": 0, "label": "string name"}], "label": "void GetQuestStatus (string name)"}}, {"detailed": "", "return": "void", "name": "GetQuestStatusFloat", "text": "void GetQuestStatusFloat (string name)", "brief": "Get quest status (int).", "signature": {"documentation": "Get quest status (int).", "parameters": [{"documentation": "quest name", "order": 0, "label": "string name"}], "label": "void GetQuestStatusFloat (string name)"}}, {"detailed": "This will delete a quest status. The name can be a wildcard with an asterisk or with a map name.\nTODO what is the wildcard syntax?", "return": "void", "name": "ResetQuestStatus", "text": "void ResetQuestStatus (string name)", "brief": "Delete quest status.", "signature": {"documentation": "Delete quest status.", "parameters": [{"documentation": "quest name", "order": 0, "label": "string name"}], "label": "void ResetQuestStatus (string name)"}}, {"detailed": "", "return": "void", "name": "IsTrigger", "text": "void IsTrigger (int id)", "brief": "Get whether object is OTHER.", "signature": {"documentation": "Get whether object is OTHER.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "void IsTrigger (int id)"}}, {"detailed": "", "return": "void", "name": "IsCaller", "text": "void IsCaller (int id)", "brief": "Get whether object is SELF.", "signature": {"documentation": "Get whether object is SELF.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "void IsCaller (int id)"}}, {"detailed": "This will cause a conversation with the object. The type of conversation is one of: NORMAL, NEXT, YESNO, YESNONEXT. The start and end are script functions that are called at the start and end of the conversation.\nIf using a YESNO conversation, the end script function should use", "return": "void", "name": "SetDialog", "text": "void SetDialog (int id, string type, function start, function end)", "brief": "Setup a conversation with object.", "signature": {"documentation": "Setup a conversation with object.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "a conversation type string (NORMAL, NEXT, YESNO, YESNONEXT)", "order": 1, "label": "string type"}, {"documentation": "a script function", "order": 2, "label": "function start"}, {"documentation": "a script function", "order": 3, "label": "function end"}], "label": "void SetDialog (int id, string type, function start, function end)"}}, {"detailed": "", "return": "void", "name": "CancelDialog", "text": "void CancelDialog (int id)", "brief": "Cancel a conversation with object.", "signature": {"documentation": "Cancel a conversation with object.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "void CancelDialog (int id)"}}, {"detailed": "", "return": "void", "name": "StoryPic", "text": "void StoryPic (int id, string name)", "brief": "Assigns a picture to a conversation.", "signature": {"documentation": "Assigns a picture to a conversation.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "a picture name", "order": 1, "label": "string name"}], "label": "void StoryPic (int id, string name)"}}, {"detailed": "This will cause a story to be told. It relies on SELF and OTHER to be particular values, which limits this to being used in the \nExample usage: TellStory(\"SwordsmanHurt\", \"Con05:OgreTalk07\")", "return": "void", "name": "TellStory", "text": "void TellStory (string audio, string story)", "brief": "Causes the telling of a story.", "signature": {"documentation": "Causes the telling of a story.", "parameters": [{"documentation": "an audio event name that is usually \"SwordsmanHurt\"", "order": 0, "label": "string audio"}, {"documentation": "a story name", "order": 1, "label": "string story"}], "label": "void TellStory (string audio, string story)"}}, {"detailed": "This requires that SetDialog has already been used to setup the conversation on the NPC object.", "return": "void", "name": "StartDialog", "text": "void StartDialog (int npc, int other)", "brief": "Starts a conversation between two objects.", "signature": {"documentation": "Starts a conversation between two objects.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int npc"}, {"documentation": "an object id", "order": 1, "label": "int other"}], "label": "void StartDialog (int npc, int other)"}}, {"detailed": "Example usage: CastSpellOn(\"SPELL_DEATH_RAY\", Object(\"CruelDude\"),", "return": "void", "name": "CastSpellObjectObject", "text": "void CastSpellObjectObject (string spell, int source, int target)", "brief": "Casts a spell from source to target.", "signature": {"documentation": "Casts a spell from source to target.", "parameters": [{"documentation": "a spell name", "order": 0, "label": "string spell"}, {"documentation": "an object id", "order": 1, "label": "int source"}, {"documentation": "an object id", "order": 2, "label": "int target"}], "label": "void CastSpellObjectObject (string spell, int source, int target)"}}, {"detailed": "", "return": "void", "name": "CastSpellObjectLocation", "text": "void CastSpellObjectLocation (string spell, int source, float x, float y)", "brief": "Casts a spell from source to target.", "signature": {"documentation": "Casts a spell from source to target.", "parameters": [{"documentation": "a spell name", "order": 0, "label": "string spell"}, {"documentation": "an object id", "order": 1, "label": "int source"}, {"documentation": "target x coordinate", "order": 2, "label": "float x"}, {"documentation": "target y coordinate", "order": 3, "label": "float y"}], "label": "void CastSpellObjectLocation (string spell, int source, float x, float y)"}}, {"detailed": "", "return": "void", "name": "CastSpellLocationObject", "text": "void CastSpellLocationObject (string spell, float x, float y, int target)", "brief": "Casts a spell from source to target.", "signature": {"documentation": "Casts a spell from source to target.", "parameters": [{"documentation": "a spell name", "order": 0, "label": "string spell"}, {"documentation": "source x coordinate", "order": 1, "label": "float x"}, {"documentation": "source y coordinate", "order": 2, "label": "float y"}, {"documentation": "an object id", "order": 3, "label": "int target"}], "label": "void CastSpellLocationObject (string spell, float x, float y, int target)"}}, {"detailed": "", "return": "void", "name": "CastSpellLocationLocation", "text": "void CastSpellLocationLocation (string spell, float x1, float y1, float x2, float y2)", "brief": "Casts a spell from source to target.", "signature": {"documentation": "Casts a spell from source to target.", "parameters": [{"documentation": "a spell name", "order": 0, "label": "string spell"}, {"documentation": "source x coordinate", "order": 1, "label": "float x1"}, {"documentation": "source y coordinate", "order": 2, "label": "float y1"}, {"documentation": "target x coordinate", "order": 3, "label": "float x2"}, {"documentation": "target y coordinate", "order": 4, "label": "float y2"}], "label": "void CastSpellLocationLocation (string spell, float x1, float y1, float x2, float y2)"}}, {"detailed": "", "return": "void", "name": "UnBlind", "text": "void UnBlind ()", "brief": "Unblind the host.", "signature": {"documentation": "Unblind the host.", "parameters": [], "label": "void UnBlind ()"}}, {"detailed": "", "return": "void", "name": "Blind", "text": "void Blind ()", "brief": "Blind the host.", "signature": {"documentation": "Blind the host.", "parameters": [], "label": "void Blind ()"}}, {"detailed": "", "return": "void", "name": "WideScreen", "text": "void WideScreen (int value)", "brief": "", "signature": {"documentation": "", "parameters": [{"documentation": "TRUE or FALSE", "order": 0, "label": "int value"}], "label": "void WideScreen (int value)"}}, {"detailed": "", "return": "int", "name": "GetElevatorStatus", "text": "int GetElevatorStatus (int id)", "brief": "Get elevator status.", "signature": {"documentation": "Get elevator status.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "int GetElevatorStatus (int id)"}}, {"detailed": "This will cause a creature to move to a location, guard a nearby location, and attack any enemies that move within range of the guarded location.", "return": "void", "name": "CreatureGuard", "text": "void CreatureGuard (int id, float x1, float y1, float x2, float y2, float distance)", "brief": "Cause a creature to guard a location.", "signature": {"documentation": "Cause a creature to guard a location.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "x coordinate to guard from", "order": 1, "label": "float x1"}, {"documentation": "y coordinate to guard from", "order": 2, "label": "float y1"}, {"documentation": "x coordinate to watch", "order": 3, "label": "float x2"}, {"documentation": "y coordinate to watch", "order": 4, "label": "float y2"}, {"documentation": "distance from (x2,y2) to attack", "order": 5, "label": "float distance"}], "label": "void CreatureGuard (int id, float x1, float y1, float x2, float y2, float distance)"}}, {"detailed": "This is the same as", "return": "void", "name": "CreatureGroupGuard", "text": "void CreatureGroupGuard (object objectGroup, float x1, float y1, float x2, float y2, float distance)", "brief": "Cause creatures in a group to guard a location.", "signature": {"documentation": "Cause creatures in a group to guard a location.", "parameters": [{"documentation": "an object group object", "order": 0, "label": "object objectGroup"}, {"documentation": "x coordinate to guard from", "order": 1, "label": "float x1"}, {"documentation": "y coordinate to guard from", "order": 2, "label": "float y1"}, {"documentation": "x coordinate to watch", "order": 3, "label": "float x2"}, {"documentation": "y coordinate to watch", "order": 4, "label": "float y2"}, {"documentation": "distance from (x2,y2) to attack", "order": 5, "label": "float distance"}], "label": "void CreatureGroupGuard (object objectGroup, float x1, float y1, float x2, float y2, float distance)"}}, {"detailed": "", "return": "void", "name": "CreatureHunt", "text": "void CreatureHunt (int id)", "brief": "Cause creature to hunt.", "signature": {"documentation": "Cause creature to hunt.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "void CreatureHunt (int id)"}}, {"detailed": "", "return": "void", "name": "CreatureGroupHunt", "text": "void CreatureGroupHunt (object objectGroup)", "brief": "Cause creatures in a group to hunt.", "signature": {"documentation": "Cause creatures in a group to hunt.", "parameters": [{"documentation": "an object group object", "order": 0, "label": "object objectGroup"}], "label": "void CreatureGroupHunt (object objectGroup)"}}, {"detailed": "", "return": "void", "name": "CreatureIdle", "text": "void CreatureIdle (int id)", "brief": "Cause creature to idle.", "signature": {"documentation": "Cause creature to idle.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "void CreatureIdle (int id)"}}, {"detailed": "", "return": "void", "name": "CreatureGroupIdle", "text": "void CreatureGroupIdle (object objectGroup)", "brief": "Cause creatures in a group to idle.", "signature": {"documentation": "Cause creatures in a group to idle.", "parameters": [{"documentation": "an object group object", "order": 0, "label": "object objectGroup"}], "label": "void CreatureGroupIdle (object objectGroup)"}}, {"detailed": "This will cause a creature to follow target, and it won't attack anything unless disrupted or instructed to.", "return": "void", "name": "CreatureFollow", "text": "void CreatureFollow (int id, int target)", "brief": "Cause creature to follow an object.", "signature": {"documentation": "Cause creature to follow an object.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "an object id", "order": 1, "label": "int target"}], "label": "void CreatureFollow (int id, int target)"}}, {"detailed": "This will cause the creatures to follow target, and they won't attack anything unless disrupted or instructed to.", "return": "void", "name": "CreatureGroupFollow", "text": "void CreatureGroupFollow (object objectGroup, int target)", "brief": "Cause creatures in a group to follow an object.", "signature": {"documentation": "Cause creatures in a group to follow an object.", "parameters": [{"documentation": "an object group object", "order": 0, "label": "object objectGroup"}, {"documentation": "an object id", "order": 1, "label": "int target"}], "label": "void CreatureGroupFollow (object objectGroup, int target)"}}, {"detailed": "This will set a creature's aggression level. The most commonly used value is 0.83.", "return": "void", "name": "AggressionLevel", "text": "void AggressionLevel (int id, float level)", "brief": "Set creature's aggression level.", "signature": {"documentation": "Set creature's aggression level.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "aggression level", "order": 1, "label": "float level"}], "label": "void AggressionLevel (int id, float level)"}}, {"detailed": "This will set a group of creature's aggression level. The most commonly used value is 0.83.", "return": "void", "name": "GroupAggressionLevel", "text": "void GroupAggressionLevel (object objectGroup, float level)", "brief": "Set group of creature's aggression level.", "signature": {"documentation": "Set group of creature's aggression level.", "parameters": [{"documentation": "an object group object", "order": 0, "label": "object objectGroup"}, {"documentation": "aggression level", "order": 1, "label": "float level"}], "label": "void GroupAggressionLevel (object objectGroup, float level)"}}, {"detailed": "", "return": "void", "name": "HitLocation", "text": "void HitLocation (int id, float x, float y)", "brief": "Melee attack a location.", "signature": {"documentation": "Melee attack a location.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "x coordinate", "order": 1, "label": "float x"}, {"documentation": "y coordinate", "order": 2, "label": "float y"}], "label": "void HitLocation (int id, float x, float y)"}}, {"detailed": "", "return": "void", "name": "GroupHitLocation", "text": "void GroupHitLocation (object objectGroup, float x, float y)", "brief": "Melee attack a location.", "signature": {"documentation": "Melee attack a location.", "parameters": [{"documentation": "an object group object", "order": 0, "label": "object objectGroup"}, {"documentation": "x coordinate", "order": 1, "label": "float x"}, {"documentation": "y coordinate", "order": 2, "label": "float y"}], "label": "void GroupHitLocation (object objectGroup, float x, float y)"}}, {"detailed": "", "return": "void", "name": "HitFarLocation", "text": "void HitFarLocation (int id, float x, float y)", "brief": "Ranged attack a location.", "signature": {"documentation": "Ranged attack a location.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "x coordinate", "order": 1, "label": "float x"}, {"documentation": "y coordinate", "order": 2, "label": "float y"}], "label": "void HitFarLocation (int id, float x, float y)"}}, {"detailed": "", "return": "void", "name": "GroupHitFarLocation", "text": "void GroupHitFarLocation (object objectGroup, float x, float y)", "brief": "Ranged attack a location.", "signature": {"documentation": "Ranged attack a location.", "parameters": [{"documentation": "an object group object", "order": 0, "label": "object objectGroup"}, {"documentation": "x coordinate", "order": 1, "label": "float x"}, {"documentation": "y coordinate", "order": 2, "label": "float y"}], "label": "void GroupHitFarLocation (object objectGroup, float x, float y)"}}, {"detailed": "", "return": "void", "name": "SetRoamFlag", "text": "void SetRoamFlag (int id, int flags)", "brief": "Set roaming flags.", "signature": {"documentation": "Set roaming flags.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "a 8-bit value (default is 0x80)", "order": 1, "label": "int flags"}], "label": "void SetRoamFlag (int id, int flags)"}}, {"detailed": "", "return": "void", "name": "GroupSetRoamFlag", "text": "void GroupSetRoamFlag (object objectGroup, int flags)", "brief": "Set roaming flags.", "signature": {"documentation": "Set roaming flags.", "parameters": [{"documentation": "an object group object", "order": 0, "label": "object objectGroup"}, {"documentation": "a 8-bit value (default is 0x80)", "order": 1, "label": "int flags"}], "label": "void GroupSetRoamFlag (object objectGroup, int flags)"}}, {"detailed": "", "return": "void", "name": "Attack", "text": "void Attack (int id, int target)", "brief": "Attack an object.", "signature": {"documentation": "Attack an object.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "an object id", "order": 1, "label": "int target"}], "label": "void Attack (int id, int target)"}}, {"detailed": "", "return": "void", "name": "GroupAttack", "text": "void GroupAttack (object objectGroup, int target)", "brief": "Attack an object.", "signature": {"documentation": "Attack an object.", "parameters": [{"documentation": "an object group object", "order": 0, "label": "object objectGroup"}, {"documentation": "an object id", "order": 1, "label": "int target"}], "label": "void GroupAttack (object objectGroup, int target)"}}, {"detailed": "This will add an entry to a player object's journal. The string can be any string, but should be less than 64 characters. The string is displayed according to the specified type:\n0 = Green text, no sound 1 = White text 2 = Red text with quest label 3 = Green text 4 = Grey text with completed label 8 = Yellow text with hint label\nIf the player object id is 0, then it will add the journal entry to all players.", "return": "void", "name": "JournalEntry", "text": "void JournalEntry (int id, string message, int type)", "brief": "Add entry to player's journal.", "signature": {"documentation": "Add entry to player's journal.", "parameters": [{"documentation": "an object id of player, or 0 for all players", "order": 0, "label": "int id"}, {"documentation": "string less than 64 characters", "order": 1, "label": "string message"}, {"documentation": "see description", "order": 2, "label": "int type"}], "label": "void JournalEntry (int id, string message, int type)"}}, {"detailed": "This will delete the first entry from a player object's journal whose message matches the specified message. If the player object id is 0, then all players are affected.", "return": "void", "name": "JournalDelete", "text": "void JournalDelete (int id, string message)", "brief": "Delete entry from player's journal.", "signature": {"documentation": "Delete entry from player's journal.", "parameters": [{"documentation": "an object id of player, or 0 for all players", "order": 0, "label": "int id"}, {"documentation": "entry to delete", "order": 1, "label": "string message"}], "label": "void JournalDelete (int id, string message)"}}, {"detailed": "This will modify the first entry in a player object's journal whose message matches the specified message. If the player object id is 0, then all players are affected.", "return": "void", "name": "JournalEdit", "text": "void JournalEdit (int id, string message, int type)", "brief": "Edit entry in player's journal.", "signature": {"documentation": "Edit entry in player's journal.", "parameters": [{"documentation": "an object id of player, or 0 for all players", "order": 0, "label": "int id"}, {"documentation": "entry to edit", "order": 1, "label": "string message"}, {"documentation": "see description of", "order": 2, "label": "int type"}], "label": "void JournalEdit (int id, string message, int type)"}}, {"detailed": "This will cause the creature to retreat if its health falls below the specified percentage.", "return": "void", "name": "RetreatLevel", "text": "void RetreatLevel (int id, float percent)", "brief": "Set when creature retreats due to low health.", "signature": {"documentation": "Set when creature retreats due to low health.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "low health ratio (0.0 - 1.0)", "order": 1, "label": "float percent"}], "label": "void RetreatLevel (int id, float percent)"}}, {"detailed": "This will cause the creatures to retreat if its health falls below the specified percentage.", "return": "void", "name": "GroupRetreatLevel", "text": "void GroupRetreatLevel (object objectGroup, float percent)", "brief": "Set when creature retreats due to low health.", "signature": {"documentation": "Set when creature retreats due to low health.", "parameters": [{"documentation": "an object group object", "order": 0, "label": "object objectGroup"}, {"documentation": "low health ratio (0.0 - 1.0)", "order": 1, "label": "float percent"}], "label": "void GroupRetreatLevel (object objectGroup, float percent)"}}, {"detailed": "This will cause the creature to stop retreating if its health is above the specified percentage.", "return": "void", "name": "ResumeLevel", "text": "void ResumeLevel (int id, float percent)", "brief": "Set when creature resumes due to health.", "signature": {"documentation": "Set when creature resumes due to health.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "health ratio (0.0 - 1.0)", "order": 1, "label": "float percent"}], "label": "void ResumeLevel (int id, float percent)"}}, {"detailed": "This will cause the creatures to stop retreating if its health is above the specified percentage.", "return": "void", "name": "GroupResumeLevel", "text": "void GroupResumeLevel (object objectGroup, float percent)", "brief": "Set when creature resumes due to health.", "signature": {"documentation": "Set when creature resumes due to health.", "parameters": [{"documentation": "an object group object", "order": 0, "label": "object objectGroup"}, {"documentation": "health ratio (0.0 - 1.0)", "order": 1, "label": "float percent"}], "label": "void GroupResumeLevel (object objectGroup, float percent)"}}, {"detailed": "", "return": "void", "name": "RunAway", "text": "void RunAway (int id, int target, int duration)", "brief": "Cause creature to run away from target.", "signature": {"documentation": "Cause creature to run away from target.", "parameters": [{"documentation": "creature's object id", "order": 0, "label": "int id"}, {"documentation": "an object id to run away from", "order": 1, "label": "int target"}, {"documentation": "number of frames", "order": 2, "label": "int duration"}], "label": "void RunAway (int id, int target, int duration)"}}, {"detailed": "", "return": "void", "name": "GroupRunAway", "text": "void GroupRunAway (object objectGroup, int target, int duration)", "brief": "Cause creatures to run away from target.", "signature": {"documentation": "Cause creatures to run away from target.", "parameters": [{"documentation": "an object group object", "order": 0, "label": "object objectGroup"}, {"documentation": "an object id to run away from", "order": 1, "label": "int target"}, {"documentation": "number of frames", "order": 2, "label": "int duration"}], "label": "void GroupRunAway (object objectGroup, int target, int duration)"}}, {"detailed": "", "return": "void", "name": "PauseObject", "text": "void PauseObject (int id, int duration)", "brief": "Pause an object temporarily.", "signature": {"documentation": "Pause an object temporarily.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "number of frames", "order": 1, "label": "int duration"}], "label": "void PauseObject (int id, int duration)"}}, {"detailed": "", "return": "void", "name": "GroupPauseObject", "text": "void GroupPauseObject (object objectGroup, int duration)", "brief": "Pause objects of a group temporarily.", "signature": {"documentation": "Pause objects of a group temporarily.", "parameters": [{"documentation": "an object group object", "order": 0, "label": "object objectGroup"}, {"documentation": "number of frames", "order": 1, "label": "int duration"}], "label": "void GroupPauseObject (object objectGroup, int duration)"}}, {"detailed": "", "return": "int", "name": "IsAttackedBy", "text": "int IsAttackedBy (int id1, int id2)", "brief": "Get whether object1 is being attacked by object2.", "signature": {"documentation": "Get whether object1 is being attacked by object2.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id1"}, {"documentation": "an object id", "order": 1, "label": "int id2"}], "label": "int IsAttackedBy (int id1, int id2)"}}, {"detailed": "", "return": "int", "name": "GetGold", "text": "int GetGold (int id)", "brief": "Get amount of gold for player object.", "signature": {"documentation": "Get amount of gold for player object.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "int GetGold (int id)"}}, {"detailed": "", "return": "void", "name": "ChangeGold", "text": "void ChangeGold (int id, int delta)", "brief": "Change amount of gold for player object.", "signature": {"documentation": "Change amount of gold for player object.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "amount to add (can be negative)", "order": 1, "label": "int delta"}], "label": "void ChangeGold (int id, int delta)"}}, {"detailed": "", "return": "int", "name": "GetAnswer", "text": "int GetAnswer (int id)", "brief": "Get answer from conversation.", "signature": {"documentation": "Get answer from conversation.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "int GetAnswer (int id)"}}, {"detailed": "", "return": "void", "name": "GiveXp", "text": "void GiveXp (int id, float xp)", "brief": "Grant experience to a player.", "signature": {"documentation": "Grant experience to a player.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "experience to gain", "order": 1, "label": "float xp"}], "label": "void GiveXp (int id, float xp)"}}, {"detailed": "This will test whether an item has a specific subclass. The subclass overlaps, so you should probably test for the class first (", "return": "int", "name": "HasSubclass", "text": "int HasSubclass (int id, string subclass)", "brief": "Get whether object has subclass.", "signature": {"documentation": "Get whether object has subclass.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "a subclass name", "order": 1, "label": "string subclass"}], "label": "int HasSubclass (int id, string subclass)"}}, {"detailed": "", "return": "void", "name": "AutoSave", "text": "void AutoSave ()", "brief": "Trigger an autosave. Only solo games.", "signature": {"documentation": "Trigger an autosave. Only solo games.", "parameters": [], "label": "void AutoSave ()"}}, {"detailed": "", "return": "void", "name": "Music", "text": "void Music (int music, int volume)", "brief": "Plays music.", "signature": {"documentation": "Plays music.", "parameters": [{"documentation": "music id", "order": 0, "label": "int music"}, {"documentation": "number from 0 - 100", "order": 1, "label": "int volume"}], "label": "void Music (int music, int volume)"}}, {"detailed": "", "return": "void", "name": "StartupScreen", "text": "void StartupScreen (int arg1)", "brief": "Show startup screen to host.", "signature": {"documentation": "Show startup screen to host.", "parameters": [{"documentation": "", "order": 0, "label": "int arg1"}], "label": "void StartupScreen (int arg1)"}}, {"detailed": "", "return": "int", "name": "IsTalking", "text": "int IsTalking ()", "brief": "Get whether host is talking.", "signature": {"documentation": "Get whether host is talking.", "parameters": [], "label": "int IsTalking ()"}}, {"detailed": "", "return": "int", "name": "GetTrigger", "text": "int GetTrigger ()", "brief": "Get OTHER if valid.", "signature": {"documentation": "Get OTHER if valid.", "parameters": [], "label": "int GetTrigger ()"}}, {"detailed": "", "return": "int", "name": "GetCaller", "text": "int GetCaller ()", "brief": "Get SELF if valid.", "signature": {"documentation": "Get SELF if valid.", "parameters": [], "label": "int GetCaller ()"}}, {"detailed": "", "return": "void", "name": "MakeFriendly", "text": "void MakeFriendly (int id)", "brief": "Set object friendly with host.", "signature": {"documentation": "Set object friendly with host.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "void MakeFriendly (int id)"}}, {"detailed": "", "return": "void", "name": "MakeEnemy", "text": "void MakeEnemy (int id)", "brief": "Unset object as friendly.", "signature": {"documentation": "Unset object as friendly.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "void MakeEnemy (int id)"}}, {"detailed": "", "return": "void", "name": "BecomePet", "text": "void BecomePet (int id)", "brief": "Set object as pet of host.", "signature": {"documentation": "Set object as pet of host.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "void BecomePet (int id)"}}, {"detailed": "", "return": "void", "name": "BecomeEnemy", "text": "void BecomeEnemy (int id)", "brief": "Unset object as pet of host.", "signature": {"documentation": "Unset object as pet of host.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "void BecomeEnemy (int id)"}}, {"detailed": "TODO", "return": "int", "name": "Unknownb8", "text": "int Unknownb8 (int id)", "brief": "", "signature": {"documentation": "", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "int Unknownb8 (int id)"}}, {"detailed": "TODO", "return": "int", "name": "Unknownb9", "text": "int Unknownb9 (int id)", "brief": "", "signature": {"documentation": "", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "int Unknownb9 (int id)"}}, {"detailed": "This will upgrade the oblivion staff. The upgrades are:\n0 = OblivionHalberd 1 = OblivionHeart 2 = OblivionWierdling 3 = OblivionOrb", "return": "void", "name": "SetHalberd", "text": "void SetHalberd (int upgrade)", "brief": "Upgrade host's oblivion staff.", "signature": {"documentation": "Upgrade host's oblivion staff.", "parameters": [{"documentation": "see description", "order": 0, "label": "int upgrade"}], "label": "void SetHalberd (int upgrade)"}}, {"detailed": "", "return": "void", "name": "DeathScreen", "text": "void DeathScreen (int which)", "brief": "Show death screen.", "signature": {"documentation": "Show death screen.", "parameters": [{"documentation": "the screen to show (1 - 11)", "order": 0, "label": "int which"}], "label": "void DeathScreen (int which)"}}, {"detailed": "", "return": "void", "name": "Frozen", "text": "void Frozen (int id, int frozen)", "brief": "Set frozen status of an object.", "signature": {"documentation": "Set frozen status of an object.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "either TRUE (1) or FALSE (0)", "order": 1, "label": "int frozen"}], "label": "void Frozen (int id, int frozen)"}}, {"detailed": "", "return": "void", "name": "NoWallSound", "text": "void NoWallSound (int noWallSound)", "brief": "Set no wall sound flag.", "signature": {"documentation": "Set no wall sound flag.", "parameters": [{"documentation": "either TRUE (1) or FALSE (0)", "order": 0, "label": "int noWallSound"}], "label": "void NoWallSound (int noWallSound)"}}, {"detailed": "This will set a function script to call for an event. The callback index is one of the following:\n3 = Enemy sighted 4 = Looking for enemy 5 = Deatch 6 = Change focus 7 = Is hit 8 = Retreat 9 = Collision 10 = Enemy heard 11 = End of waypoint 13 = Lost sight of enemy\nNo other indexes are defined.", "return": "void", "name": "SetCallback", "text": "void SetCallback (int id, int idx, function callback)", "brief": "Set a callback on an object.", "signature": {"documentation": "Set a callback on an object.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "callback index", "order": 1, "label": "int idx"}, {"documentation": "a script function", "order": 2, "label": "function callback"}], "label": "void SetCallback (int id, int idx, function callback)"}}, {"detailed": "", "return": "void", "name": "DeleteObjectTimer", "text": "void DeleteObjectTimer (int id, int delay)", "brief": "Delete object after a delay.", "signature": {"documentation": "Delete object after a delay.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "number of frames", "order": 1, "label": "int delay"}], "label": "void DeleteObjectTimer (int id, int delay)"}}, {"detailed": "", "return": "void", "name": "TrapSpells", "text": "void TrapSpells (int id, string spell1, string spell2, string spell3)", "brief": "Set spells on a bomber.", "signature": {"documentation": "Set spells on a bomber.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "a spell name, or NULL", "order": 1, "label": "string spell1"}, {"documentation": "a spell name, or NULL", "order": 2, "label": "string spell2"}, {"documentation": "a spell name, or NULL", "order": 3, "label": "string spell3"}], "label": "void TrapSpells (int id, string spell1, string spell2, string spell3)"}}, {"detailed": "This will return whether the host is currently talking to shopkeeper.", "return": "int", "name": "IsTrading", "text": "int IsTrading ()", "brief": "Get whether the host is currently trading.", "signature": {"documentation": "Get whether the host is currently trading.", "parameters": [], "label": "int IsTrading ()"}}, {"detailed": "", "return": "void", "name": "ClearMessages", "text": "void ClearMessages (int id)", "brief": "Clear messages on player's screen.", "signature": {"documentation": "Clear messages on player's screen.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "void ClearMessages (int id)"}}, {"detailed": "", "return": "void", "name": "SetShopkeeperText", "text": "void SetShopkeeperText (int id, string text)", "brief": "Set shopkeeper text.", "signature": {"documentation": "Set shopkeeper text.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "a string less than 32 characters", "order": 1, "label": "string text"}], "label": "void SetShopkeeperText (int id, string text)"}}, {"detailed": "TODO", "return": "void", "name": "Unknownc4", "text": "void Unknownc4 ()", "brief": "", "signature": {"documentation": "", "parameters": [], "label": "void Unknownc4 ()"}}, {"detailed": "", "return": "int", "name": "IsSummoned", "text": "int IsSummoned (int id)", "brief": "Gets whether object is a summoned creature.", "signature": {"documentation": "Gets whether object is a summoned creature.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "int IsSummoned (int id)"}}, {"detailed": "", "return": "void", "name": "ZombieStayDown", "text": "void ZombieStayDown (int id)", "brief": "Set zombie to stay down.", "signature": {"documentation": "Set zombie to stay down.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "void ZombieStayDown (int id)"}}, {"detailed": "", "return": "void", "name": "ZombieGroupStayDown", "text": "void ZombieGroupStayDown (object objectGroup)", "brief": "Set group of zombies to stay down.", "signature": {"documentation": "Set group of zombies to stay down.", "parameters": [{"documentation": "an object group object", "order": 0, "label": "object objectGroup"}], "label": "void ZombieGroupStayDown (object objectGroup)"}}, {"detailed": "", "return": "void", "name": "RaiseZombie", "text": "void RaiseZombie (object int id)", "brief": "Raise a zombie. Also clears stay down state.", "signature": {"documentation": "Raise a zombie. Also clears stay down state.", "parameters": [{"documentation": "an object id", "order": 0, "label": "object int id"}], "label": "void RaiseZombie (object int id)"}}, {"detailed": "", "return": "void", "name": "RaiseZombieGroup", "text": "void RaiseZombieGroup (object objectGroup)", "brief": "Raise a zombie. Also clears stay down state.", "signature": {"documentation": "Raise a zombie. Also clears stay down state.", "parameters": [{"documentation": "an object group object", "order": 0, "label": "object objectGroup"}], "label": "void RaiseZombieGroup (object objectGroup)"}}, {"detailed": "TODO", "return": "void", "name": "MusicPushEvent", "text": "void MusicPushEvent ()", "brief": "", "signature": {"documentation": "", "parameters": [], "label": "void MusicPushEvent ()"}}, {"detailed": "TODO", "return": "void", "name": "MusicPopEvent", "text": "void MusicPopEvent ()", "brief": "", "signature": {"documentation": "", "parameters": [], "label": "void MusicPopEvent ()"}}, {"detailed": "TODO", "return": "void", "name": "MusicEvent", "text": "void MusicEvent ()", "brief": "", "signature": {"documentation": "", "parameters": [], "label": "void MusicEvent ()"}}, {"detailed": "", "return": "int", "name": "IsGameBall", "text": "int IsGameBall (int id)", "brief": "Get whether object is a GameBall.", "signature": {"documentation": "Get whether object is a GameBall.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "int IsGameBall (int id)"}}, {"detailed": "", "return": "int", "name": "IsCrown", "text": "int IsCrown (int id)", "brief": "Get whether object is a Crown.", "signature": {"documentation": "Get whether object is a Crown.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "int IsCrown (int id)"}}, {"detailed": "", "return": "void", "name": "EndGame", "text": "void EndGame (int type)", "brief": "End of game.", "signature": {"documentation": "End of game.", "parameters": [{"documentation": "one of 0=Warrior, 1=Wizard, 2=Conjurer", "order": 0, "label": "int type"}], "label": "void EndGame (int type)"}}, {"detailed": "", "return": "void", "name": "ImmediateBlind", "text": "void ImmediateBlind ()", "brief": "Immediately blind the host.", "signature": {"documentation": "Immediately blind the host.", "parameters": [], "label": "void ImmediateBlind ()"}}, {"detailed": "", "return": "void", "name": "SetTeam", "text": "void SetTeam (int id, int team)", "brief": "Set player object's team.", "signature": {"documentation": "Set player object's team.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}, {"documentation": "team number", "order": 1, "label": "int team"}], "label": "void SetTeam (int id, int team)"}}, {"detailed": "", "return": "int", "name": "GetTeam", "text": "int GetTeam (int id)", "brief": "Get player object's team.", "signature": {"documentation": "Get player object's team.", "parameters": [{"documentation": "an object id", "order": 0, "label": "int id"}], "label": "int GetTeam (int id)"}}];
